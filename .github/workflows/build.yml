name: Build & Ship

on:
  push:
    branches:
      - main # 在 main 分支发生 push 事件时触发工作流

jobs:
  desktop-build:
    runs-on: windows-latest
    timeout-minutes: 45 # 设置超时时间为 45 分钟

    steps:
      # Step 1: 检出代码
      - uses: actions/checkout@v4

      # Step 1: 恢复 JBR 缓存
      - name: JBR Cache
        uses: actions/cache@v3
        id: cache-jdk
        with:
          path: C:\jbr # 缓存路径
          key: jbr # 缓存的唯一标识

      # Step 2: 下载并配置 JBR (JetBrains Runtime)（如果缓存未命中）
      - name: Download and Extract JBR
        if: steps.cache-jdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p C:\jbr
          curl -L -o C:\jbr.tar.gz https://cache-redirector.jetbrains.com/intellij-jbr/jbrsdk_jcef-17.0.11-linux-x64-b1312.2.tar.gz
          tar -xzf C:\jbr.tar.gz -C C:\jbr --strip-components=1
        env:
          JBR_HOME: C:\jbr
      # Step 3: 配置 JAVA_HOME 环境变量
      - name: Configure JAVA_HOME
        run: |
          echo "JAVA_HOME=C:\\jbr" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PATH=C:\\jbr\\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        
     # Step 5: 验证 JBR 配置是否成功
      - name: Verify JBR
        run: |
          $env:JAVA_HOME\bin\java -version
        shell: pwsh

      # Step 6：打印 JBR 目录内容（使用 cmd）
      - name: Print JBR Directory
        run: dir C:\jbr /S /B

      # Step 7: 构建 EXE
      - name: Build exe app
        run: |
          .\gradlew packageUberJarForCurrentOS
          .\gradlew createDistributable
          .\gradlew packageExe

      # Step 8：打印生成文件路径
      - name: Print Build Output
        run: dir composeApp\build /S /B

      # Step 9: 保存构建产物
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributable
          if-no-files-found: ignore
          path: composeApp/build
