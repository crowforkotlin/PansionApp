package bp

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Add
import androidx.compose.material.icons.rounded.AutoAwesome
import androidx.compose.material.icons.rounded.CropFree
import androidx.compose.material.icons.rounded.LocalMall
import androidx.compose.material.icons.rounded.MenuBook
import androidx.compose.material.icons.rounded.Mic
import androidx.compose.material.icons.rounded.NoPhotography
import androidx.compose.material.icons.rounded.PhotoCamera
import androidx.compose.material.icons.rounded.Settings
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import components.AppBar
import components.CustomTextButton
import resources.Images

@Composable
fun SberMain() {
    val aboutMe = remember { mutableStateOf(false) }
    val isBooks = remember { mutableStateOf(false) }
    val isShop = remember { mutableStateOf(false) }
    val isDialog = remember { mutableStateOf(false) }
    val isCamera = remember { mutableStateOf(false) }
    val dialogStep = remember { mutableStateOf(0) }
    Scaffold(
        Modifier.fillMaxSize()
    ) {
        Column(Modifier.padding(it).fillMaxSize().verticalScroll(rememberScrollState())) {

            AppBar(
                title = {
                    if (isDialog.value) {
                        CustomTextButton(
                            text = "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å",
                            modifier = Modifier.padding(start = 10.dp)
                        ) { isDialog.value = false; isCamera.value = false; dialogStep.value = 0 }
                    } else {
                        Text(
                            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
                            modifier = Modifier.padding(start = 10.dp),
                            fontSize = 25.sp,
                            fontWeight = FontWeight.Black,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                },
                actionRow = {
                    if (isDialog.value) {
                        CustomTextButton(text = "–ß–∞—Ç", modifier = Modifier.padding(end = 10.dp)) {}
                    }
                }
            )
            if (isCamera.value) {
                Box(Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                    Image(
                        Images.SberPrimer, null,
                        modifier = Modifier.height(500.dp).clip(RoundedCornerShape(20.dp))
                    )
                    Icon(
                        Icons.Rounded.CropFree, null,
                        modifier = Modifier.size(400.dp)
                    )
                }
            }
            Spacer(Modifier.height(if (isCamera.value) 15.dp else 25.dp))
            Box(Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                Image(
                    Images.SberLogo,
                    null,
                    Modifier.size(if (isCamera.value) 50.dp else 150.dp)
                )
            }
            if (isDialog.value) {
                Spacer(Modifier.height(10.dp))
                if(dialogStep.value != 0) {
                    Text(text = when(dialogStep.value) {
                        1 -> "–î–∞–≤–∞–π –ø–æ–∑–∞–Ω–∏–º–∞–µ–º—Å—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π"
                        2 -> "–ù–æ–≤—É—é —Ç–µ–º—É"
                        3 -> "–î–∞! –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ –¥–≤–∞ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–±—ã—Ç–∏—è:\n—è —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª —ç–∫–∑–∞–º–µ–Ω –∏ –¥–µ–≤–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–Ω–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –æ—Ç–≤–µ—Ç–∏–ª–∞ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é!"
                        else -> ""
                    }, textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth().padding(horizontal = 15.dp).alpha(.5f).clickable { dialogStep.value += 1 }
                    )
                    Spacer(Modifier.height(5.dp))
                }
                Text(
                    text = if (isCamera.value) "–Ø –≤–∏–∂—É –¥–≤–∞ –ø—Ä–∏–º–µ—Ä–∞.\n–ö–∞–∫–æ–π –∏–∑ –Ω–∏—Ö –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å?" else when (dialogStep.value) {
                        1 -> "–û–∫–µ–π! –¢—ã —Å–µ–π—á–∞—Å —á—Ç–æ-—Ç–æ —Ä–µ—à–∞–µ—à—å?\n–ò–ª–∏ –ª—É—á—à–µ –ø—Ä–æ–π–¥—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É?"
                        2 -> "–•–æ—Ä–æ—à–æ, –ê—Ä—Ç—ë–º! –°–Ω–∞—á–∞–ª–∞ —è —Å–ø—Ä–æ—à—É —Ç–µ–±—è –æ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏. –ü–æ—Ç–æ–º –ø–µ—Ä–µ–π–¥—ë–º –∫ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞–º.\n–ö—Å—Ç–∞—Ç–∏, –ê—Ä—Ç—ë–º! –£ —Ç–µ–±—è –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –≥–æ–ª–æ—Å, –ø–æ–¥–µ–ª–∏—à—å—Å—è —Ä–∞–¥–æ—Å—Ç—å—é? –≠—Ç–æ –∫–∞–∫-—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —ç–∫–∑–∞–º–µ–Ω–æ–º?)"
                        3 -> "–û–≥–æ! –¢—ã –ø—Ä–æ –õ–µ—Ä—É? –°–æ–≤–µ—Ç –¥–∞ –ª—é–±–æ–≤—å –≤–∞–º! –•–µ-—Ö–µüòä\n –ù—É —á—Ç–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?"
                        else -> "–ü—Ä–∏–≤–µ—Ç, –ê—Ä—Ç—ë–º!\n–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?"
                    },
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth().padding(horizontal = 15.dp)
                )
                if (dialogStep.value == 0) {
                    Spacer(Modifier.height(5.dp))
                    Text(
                        "–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã",
                        modifier = Modifier.alpha(.5f).fillMaxWidth(),
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.SemiBold
                    )
                    Spacer(Modifier.height(10.dp))
                    Row(
                        Modifier.fillMaxWidth().padding(horizontal = 10.dp).height(80.dp),
                        horizontalArrangement = Arrangement.Center
                    ) {
                        OutlinedButton(
                            onClick = { dialogStep.value = 1 },
                            modifier = Modifier.fillMaxWidth(.33f).fillMaxHeight(),
                            shape = RoundedCornerShape(25.dp),
                            contentPadding = PaddingValues(10.dp)
                        ) {
                            Text("–î–∞–≤–∞–π\n–ø–æ–∑–∞–Ω–∏–º–∞–µ–º—Å—è\n–º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π", textAlign = TextAlign.Center)
                        }
                        Spacer(Modifier.width(5.dp))
                        OutlinedButton(
                            onClick = {},
                            modifier = Modifier.fillMaxWidth(.5f).fillMaxHeight(),
                            shape = RoundedCornerShape(25.dp),
                            contentPadding = PaddingValues(10.dp)
                        ) {
                            Text(
                                "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å\n" +
                                        "–ø–∏—Ü—Ü—É?", textAlign = TextAlign.Center
                            )
                        }
                        Spacer(Modifier.width(5.dp))
                        OutlinedButton(
                            onClick = {},
                            modifier = Modifier.fillMaxSize(),
                            shape = RoundedCornerShape(25.dp),
                            contentPadding = PaddingValues(10.dp)
                        ) {
                            Text(
                                "–ü–æ–º–æ–∂–µ—à—å –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å\n" +
                                        "–∫–∞—Ä—Ç–∏–Ω—É?", textAlign = TextAlign.Center
                            )
                        }
                    }
                }
            }
            val micColor = MaterialTheme.colorScheme.primary
            if (isDialog.value) {
                Spacer(Modifier.height(15.dp))
                Row(
                    Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Card(
                        modifier = Modifier.size(15.dp, 20.dp),
                        colors = CardDefaults.cardColors(containerColor = micColor)
                    ) {}
                    Spacer(Modifier.width(5.dp))
                    Card(
                        modifier = Modifier.size(20.dp, 40.dp),
                        colors = CardDefaults.cardColors(containerColor = micColor)
                    ) {}
                    Spacer(Modifier.width(5.dp))
                    Card(
                        modifier = Modifier.size(25.dp, 55.dp),
                        colors = CardDefaults.cardColors(containerColor = micColor)
                    ) {}
                    Spacer(Modifier.width(5.dp))
                    Card(
                        modifier = Modifier.size(20.dp, 40.dp),
                        colors = CardDefaults.cardColors(containerColor = micColor)
                    ) {}
                    Spacer(Modifier.width(5.dp))
                    Card(
                        modifier = Modifier.size(15.dp, 20.dp),
                        colors = CardDefaults.cardColors(containerColor = micColor)
                    ) {}
                }
            }
            Spacer(Modifier.height(if (isCamera.value) 15.dp else 15.dp))// else 25.dp))
            Row(
                Modifier.fillMaxWidth().padding(horizontal = 10.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                IconButton(
                    onClick = {}
                ) { Icon(Icons.Rounded.Settings, null) }
                if (isDialog.value) {

                    IconButton(
                        onClick = { isCamera.value = !isCamera.value },
                        modifier = Modifier.size(50.dp)
                    ) {
                        Box(Modifier.fillMaxSize().background(MaterialTheme.colorScheme.onPrimary))
                        Icon(
                            if (isCamera.value) Icons.Rounded.NoPhotography else Icons.Rounded.PhotoCamera,
                            null
                        )
                    }
                } else {
                    CustomTextButton(text = "–ù–∞—á–∞—Ç—å") { isDialog.value = true }
                }
                Box(contentAlignment = Alignment.Center) {
                    IconButton(
                        onClick = { isShop.value = true }
                    ) {
                        Icon(Icons.Rounded.LocalMall, null)
                    }

                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center,
                        modifier = Modifier.offset(y = 15.dp)
                    ) {
                        Text("810", fontSize = 13.sp)
                        Icon(
                            Icons.Rounded.AutoAwesome,
                            null,
                            modifier = Modifier.size(13.dp).offset(y = 3.dp)
                        )
                    }
                }
            }
            Text(
                "–ó–∞–¥–∞–Ω–∏—è",
                modifier = Modifier.padding(start = 10.dp).padding(horizontal = 10.dp),
                fontSize = 25.sp,
                fontWeight = FontWeight.Black,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            TaskItem(
                subject = "–§–∏–∑–∏–∫–∞",
                whatTo = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é",
                task = "–°–¥–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¥–∏–∫—Ç–∞–Ω—Ç",
                15
            )
            TaskItem(
                subject = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                whatTo = "—Ç–µ–º–µ",
                task = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π",
                10
            )
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(top = 8.dp).padding(start = 10.dp)
                    .padding(horizontal = 10.dp)
            ) {
                Text(
                    "–î–µ–ª–∞",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Black,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                IconButton({}, modifier = Modifier.size(20.dp).padding(top = 4.dp)) {
                    Icon(Icons.Rounded.Add, null)
                }
            }
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(horizontal = 15.dp).offset(y = 3.dp)
            ) {
                Checkbox(checked = true, onCheckedChange = {})
                Text(
                    "–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ —à–∫–æ–ª—ã",
                    fontSize = 18.sp,
                    textDecoration = TextDecoration.LineThrough
                )
            }
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(horizontal = 15.dp).offset(y = -5.dp)
            ) {
                Checkbox(checked = false, onCheckedChange = {})
                Text("–°–¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏", fontSize = 18.sp)
            }
            Row(
                modifier = Modifier.padding(start = 10.dp).offset(y = -3.dp) //, top = 5.dp
                    .padding(horizontal = 10.dp).fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        "–ó–Ω–∞–Ω–∏—è",
                        fontSize = 25.sp,
                        fontWeight = FontWeight.Black,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )
                    Spacer(Modifier.width(5.dp))
                    IconButton(
                        onClick = { isBooks.value = true },
                        modifier = Modifier.offset(y = 2.dp, x = (-10).dp)
                    ) {
                        Icon(
                            Icons.Rounded.MenuBook, null
                        )
                    }
                }
                CustomTextButton("–û–±–æ –º–Ω–µ") {
                    aboutMe.value = true
                }
            }

            ZnaniyaItem(subject = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞*", 570, lvl = 15)
            Spacer(Modifier.height(5.dp))
            ZnaniyaItem(subject = "–§–∏–∑–∏–∫–∞*", 200, lvl = 4)
            Spacer(Modifier.height(5.dp))
            ZnaniyaItem(subject = "–•–∏–º–∏—è", 100, lvl = 2, isDetail = false)
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier.fillMaxWidth().padding(horizontal = 15.dp)//.padding(top = 5.dp)
            ) {
                Text(
                    modifier = Modifier.padding(start = 25.dp),
                    text = "–ó–∞–±—ã–ª –±–∞–∑–æ–≤—ã–µ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏"
                )
                Row(verticalAlignment = Alignment.CenterVertically) {
                    CustomTextButton(text = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") {}
                }
            }

            Spacer(Modifier.height(100.dp))
        }
    }
    if (aboutMe.value) {
        AboutMe { aboutMe.value = false }
    }
    if (isBooks.value) {
        Book { isBooks.value = false }
    }

    if (isShop.value) {
        Shop { isShop.value = false }
    }
}

@Composable
fun ZnaniyaItem(subject: String, count: Int, lvl: Int, isDetail: Boolean = true) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier.padding(horizontal = 15.dp).padding(start = 15.dp).fillMaxWidth()
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Text(subject, fontSize = 20.sp)
            Spacer(Modifier.width(10.dp))
            CustomTextButton(if (isDetail) "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" else "–ó–∞–∫—Ä—ã—Ç—å") {}
        }
        Row(verticalAlignment = Alignment.CenterVertically) {
            Text(text = "$count")
            Icon(Icons.Rounded.AutoAwesome, null)
            Spacer(Modifier.width(5.dp))
            Text(
                text = "$lvl —É—Ä.",
                modifier = Modifier.alpha(.5f).width(50.dp),
                textAlign = TextAlign.End
            )
        }
    }
}

@Composable
fun TaskItem(subject: String, whatTo: String, task: String, prize: Int) {
    Column(modifier = Modifier.padding(horizontal = 15.dp).padding(start = 15.dp)) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(top = 5.dp)
        ) {
            Text(
                "${subject}:",
                fontSize = 20.sp,
                fontWeight = FontWeight.SemiBold,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            Spacer(Modifier.width(10.dp))
            CustomTextButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ ${whatTo}") {}
        }
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.fillMaxWidth()//.padding(top = 5.dp)
        ) {
            Text(
                modifier = Modifier.padding(start = 10.dp),
                text = task
            )
            Row(verticalAlignment = Alignment.CenterVertically) {
                CustomTextButton(text = "+${prize}") {}
                Icon(Icons.Rounded.AutoAwesome, null)
            }
        }
    }
}